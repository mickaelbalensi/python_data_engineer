import sqlite3
import os
from bs4 import BeautifulSoup
import glob
import logging

# Function to extract categories from HTML page
def extract_categories_from_html(html_content):
    # Use BeautifulSoup to parse the HTML content
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Example: extracting categories from a meta tag or class
    # Modify this part to match the structure of categories in your HTML pages
    categories = []
    for category_tag in soup.find_all('a', class_='category-link'):  # Example selector
        category = category_tag.text.strip()

        if category:
            categories.append(category)
    
    return categories

# Function to store HTML page into SQL database
def store_html_page(conn, url, content):
    cursor = conn.cursor()
    cursor.execute("INSERT INTO htmlpage_table (url, content) VALUES (?, ?)", (url, content))
    conn.commit()
    return cursor.lastrowid  # Return the ID of the inserted HTML page

# Function to store category into SQL database
def store_category(conn, category_name):
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO categories_table (category_name) VALUES (?)", (category_name,))
    conn.commit()
    return cursor.lastrowid  # Return the ID of the inserted category

# Function to store the relation between HTML page and category into SQL database
def store_html_category_relation(conn, htmlpage_id, category_id):
    cursor = conn.cursor()
    cursor.execute("INSERT INTO html_categories_table (htmlpage_id, category_id) VALUES (?, ?)",
                   (htmlpage_id, category_id))
    conn.commit()

# Main function to process all HTML pages and store data in SQL
def process_html_pages_and_store_in_sql(conn, html_files_path):
    # Loop over all HTML files in the directory
    for html_file in glob.glob(html_files_path):
        with open(html_file, 'r', encoding='utf-8') as file:
            html_content = file.read()
        
        # Extract the categories from the HTML content
        categories = extract_categories_from_html(html_content)
        
        # Store the HTML page into the SQL database
        url = os.path.basename(html_file)  # Assuming the filename is the URL or identifier
        htmlpage_id = store_html_page(conn, url, html_content)
        
        # Store categories and their relation to the HTML page
        for category in categories:
            category_id = store_category(conn, category)
            store_html_category_relation(conn, htmlpage_id, category_id)

# Example usage
if __name__ == '__main__':
    # Connect to SQLite database (you can change to your preferred database)
    conn = sqlite3.connect('wikidata.db')

    # Path to your local HTML files (e.g., all *.html files in a directory)
    html_files_path = '/path/to/your/html/files/*.html'

    # Create the tables if they don't exist
    conn.execute('''
        CREATE TABLE IF NOT EXISTS htmlpage_table (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT NOT NULL,
            content TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.execute('''
        CREATE TABLE IF NOT EXISTS categories_table (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.execute('''
        CREATE TABLE IF NOT EXISTS html_categories_table (
            htmlpage_id INTEGER,
            category_id INTEGER,
            FOREIGN KEY (htmlpage_id) REFERENCES htmlpage_table(id),
            FOREIGN KEY (category_id) REFERENCES categories_table(id),
            PRIMARY KEY (htmlpage_id, category_id)
        )
    ''')

    # Process the HTML pages and store data in SQL
    process_html_pages_and_store_in_sql(conn, html_files_path)

    # Close the database connection
    conn.close()
